from random import randint
from typing import Callable


class Pizza:
    def __init__(self, name: str, size: str):
        if name not in ['Margherita', 'Pepperoni', 'Hawaiian']:
            raise ValueError('Not have this pizza in menu')
        if size not in ['L', 'XL']:
            raise ValueError('Possible sizes: L, XL')

        self.size = size
        self.name = name

        if name == 'Margherita':
            self.name += ' üßÄ'
            self.ingredients = ['tomato sauce', 'mozzarella', 'tomatoes']

        if name == 'Pepperoni':
            self.name += ' üçï'
            self.ingredients = ['tomato sauce', 'mozzarella', 'pepperoni']

        if name == 'Hawaiian':
            self.name += ' üçç'
            self.ingredients = ['tomato sauce', 'mozzarella', 'chicken', 'pineapples']

    def __str__(self):
        return f'{self.name} ({self.size})'

    def dict(self, test=False):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ—Ü–µ–ø—Ç"""
        recipe = {self.name: ', '.join(ingredient for ingredient in self.ingredients)}
        if test:
            return recipe
        else:
            print(recipe)

    def __eq__(self, other):
        if self.name == other.name and self.size == other.size:
            return True
        else:
            return False


def order(pizza: str, size: str, delivery_flg: bool, test=False):
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    if delivery_flg not in [True, False]:
        raise ValueError('Delivery: True or False?')
    ordered_pizza = Pizza(pizza, size)
    answer = ''
    if test:
        answer += ordered_pizza.__str__() + ': üë®üèª‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∑–∞ 15 –º–∏–Ω—É—Ç '
    else:
        print(ordered_pizza, ': üë®üèª‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∑–∞ 15 –º–∏–Ω—É—Ç')
    if delivery_flg:
        if test:
            answer += ordered_pizza.__str__() + ': üõµ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞ 10 –º–∏–Ω—É—Ç'
        else:
            print(ordered_pizza, ': üõµ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞ 10 –º–∏–Ω—É—Ç')
    if test:
        return answer


def menu(test=False):
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é"""
    all_pizza = [Pizza('Margherita', 'L'), Pizza('Pepperoni', 'L'), Pizza('Hawaiian', 'L')]
    answer = ''
    for pizza in all_pizza:
        if test:
            answer += f'- {pizza.name}: ' + ', '.join(ingredient for ingredient in pizza.ingredients) + ' '
        else:
            print(f'- {pizza.name}: ', ', '.join(ingredient for ingredient in pizza.ingredients))
    if test:
        return answer


def log(example: str) -> Callable:
    """–ü–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∏–º –ø–æ —à–∞–±–ª–æ–Ω—É –µ–µ –∏–º—è –∏ –≤—Ä–µ–º—è"""
    def outer_wrapper(function: Callable) -> Callable:
        def inner_wrapper(*args, **kwargs):
            print(example.replace('{}', f'{randint(5, 50)}').replace('name', function.__name__))
            function(*args, **kwargs)

        return inner_wrapper

    return outer_wrapper


@log('ü•ß name in {} s!')
def bake(pizza: Pizza):
    """–ì–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É"""


@log('üõµ name in {} s!')
def delivery(pizza: Pizza):
    """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""


@log('üè† name in {} s!')
def pickup(pizza: Pizza):
    """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""


if __name__ == '__main__':
    first_pizza = Pizza('Pepperoni', 'L')
    print(first_pizza)
    first_pizza.dict()

    second_pizza = Pizza('Margherita', 'L')
    third_pizza = Pizza('Pepperoni', 'XL')
    same_pizza = Pizza('Pepperoni', 'L')

    print(first_pizza == first_pizza)
    print(first_pizza == second_pizza)
    print(first_pizza == third_pizza)
    print(first_pizza == same_pizza)

    menu()
    order('Hawaiian', 'XL', delivery_flg=True)
    bake(first_pizza)
    delivery(first_pizza)
    pickup(first_pizza)
